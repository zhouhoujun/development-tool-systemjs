{"version":3,"sources":["SystemjsBundle.ts"],"names":["_","require","development_core_1","path","fs_1","chalk","replace","Builder","source","vinylBuffer","chksum","mkdirp","SystemjsBundle","_super","info","_this","call","this","name","runWay","RunWay","sequence","manifestSplit","__extends","prototype","ctx","dist","gulp","option","bundles","initBundles","then","Promise","all","map","getBundles","loadBuilder","builder","bundle","bundleConfig","bcfg","getBuildConfig","defaults","config","groupBundle","trans","translate","groups","flatten","src","getSrc","getInfo","console","log","cyan","fileFilter","files","getRelativeSrc","mainfile","getBundleManifestPath","createBundler","join","execute","context","bundleMaps","calcChecksums","checksums","updateBundleManifest","manifest","writeBundleManifest","green","setup","initOption","pipes","ps","getAssertResetPipe","length","concat","working","output","bundlemap","modules","push","sfx","bundleName","filename","bundleDest","getOption","jsbuilder","getRootPath","systemConfig","resolve","isArray","cf","loadConfig","undefined","t","stream","opt","pr","to","bundleDeps","pkg","getPackage","packageFile","red","process","exit","deps","dependencies","keys","jspm","depsExclude","exclude_1","isFunction","filter","d","indexOf","isBoolean","deplibs","combine","items","cores","each","n","b","exclude","toModule","baseURL","bundleBaseDir","s","toUrl","toModulePath","fn","substring","extname","extend","dest","file","systemConfigTempl","relationToRoot","bust","bundlePaths","paths","getDist","rootpath","getFolders","f","p","env","root","includePackageFiles","jspmMates","*.css","loader","*.json","*.jsx","minify","mangle","sourceMaps","separateCSS","lowResSourceMaps","toRootPath","toStr","parent","toRootSrc","toSrc","rootURL","restps","isUndefined","resetAsserts","folders","isString","pth","toDistPath","existsSync","yellow","toDistSrc","ps_1","dist_1","baseURL_1","root_1","relp","fm","basename","reg","RegExp","reg2","reg3","gb","uniq","split","bundleGp","bundleStr","bundleItems","minusStr","exclusionString","getBundleDest","key","str","exclusionArray","minus","forEach","item","group","builderCfg","bundler","buildStatic","shortPath","getBundleShortPath","parse","base","bind","sync","dirname","write","nextTick","end","pipe","chksums","isObject","reject","filepath","err","sum","error","getBundleManifest","template","maps_1","css","json","test","first","jspmMetas","maps","JSON","stringify","jspmMeta","includes","readFile","data","mainfilePipes","mainfileOutput","content","readFileSync","idx","writeFileSync","e","fullPath","min","name_1","PipeTask","__decorate","task","oper","Operation","release","deploy","exports"],"mappings":"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","file":"../SystemjsBundle.js","sourcesContent":["import * as _ from 'lodash';\r\nimport { IMap, task, RunWay, IAssertDist, ITaskContext, Src, Pipe, OutputPipe, ITaskInfo, TransformSource, ITransform, Operation, PipeTask, bindingConfig } from 'development-core';\r\nimport { Gulp } from 'gulp';\r\nimport * as path from 'path';\r\nimport { IBundlesConfig, IBundleGroup, IBuidlerConfig, IBundleMap, IBundleTransform } from './config';\r\n\r\nimport { readFileSync, readFile, existsSync, writeFileSync, readdirSync } from 'fs';\r\nimport * as chalk from 'chalk';\r\n\r\nconst replace = require('gulp-replace');\r\n// const globby = require('globby');\r\nconst Builder = require('systemjs-builder');\r\nconst source = require('vinyl-source-stream');\r\nconst vinylBuffer = require('vinyl-buffer');\r\nconst chksum = require('checksum');\r\nconst mkdirp = require('mkdirp');\r\n// const uglify = require('gulp-uglify');\r\n\r\n\r\n@task({\r\n    oper: Operation.release | Operation.deploy\r\n})\r\nexport class SystemjsBundle extends PipeTask {\r\n\r\n    name = 'jspm-bundle';\r\n    runWay = RunWay.sequence;\r\n    private bundleMaps: IBundleMap[];\r\n    constructor(info?: ITaskInfo) {\r\n        super(info);\r\n    }\r\n\r\n    source(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): TransformSource | Promise<TransformSource> {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        if (option.bundles) {\r\n            return this.initBundles(<ITaskContext>ctx)\r\n                .then(() => {\r\n                    return Promise.all(_.map(this.getBundles(ctx), name => {\r\n                        return this.loadBuilder(ctx)\r\n                            .then(builder => {\r\n                                let bundle: IBundleGroup = this.bundleConfig[name];\r\n                                let bcfg = this.getBuildConfig(ctx);\r\n                                bundle.builder = <IBuidlerConfig>_.defaults(bundle.builder, bcfg);\r\n                                if (bundle.builder.config) {\r\n                                    builder.config(bundle.builder.config);\r\n                                }\r\n                                return this.groupBundle(<ITaskContext>ctx, builder, name, bundle, gulp)\r\n                                    .then(trans => this.translate(trans));\r\n                            });\r\n                    }))\r\n                }).then(groups => {\r\n                    return _.flatten(groups);\r\n                });\r\n        } else {\r\n            return this.loadBuilder(ctx)\r\n                .then(builder => {\r\n                    let src = ctx.getSrc(this.getInfo());\r\n                    console.log('start bundle all src : ', chalk.cyan(<any>src));\r\n                    let bcfg = this.getBuildConfig(ctx);\r\n                    if (bcfg.config) {\r\n                        builder.config(bcfg.config)\r\n                    }\r\n\r\n                    return ctx.fileFilter(src)\r\n                        .then(files => {\r\n                            files = this.getRelativeSrc(ctx, files);\r\n                            console.log('bundle files:', chalk.cyan(<any>files));\r\n                            let mainfile = this.getBundleManifestPath(<ITaskContext>ctx);\r\n                            return this.createBundler(<ITaskContext>ctx, builder, 'bundle', files.join(' + '), mainfile, bcfg)\r\n                                .then(trans => this.translate(trans));\r\n                        });\r\n                });\r\n        }\r\n    }\r\n\r\n    execute(context: ITaskContext, gulp: Gulp) {\r\n        this.bundleMaps = [];\r\n        let ctx = <ITaskContext>context;\r\n        return super.execute(ctx, gulp)\r\n            .then(() => {\r\n                let option = <IBundlesConfig>ctx.option;\r\n                if (option.bundles) {\r\n                    return this.calcChecksums(option, this.bundleMaps).then((checksums) => {\r\n                        return this.updateBundleManifest(ctx, this.bundleMaps, checksums);\r\n                    });\r\n                } else {\r\n                    return null;\r\n                }\r\n            }).then(manifest => {\r\n                if (manifest) {\r\n                    return this.writeBundleManifest(ctx, manifest, gulp)\r\n                        .then(() => {\r\n                            console.log(chalk.green('------ Complete -------------'));\r\n                        });\r\n                } else {\r\n                    console.log(chalk.green('------ Complete -------------'));\r\n                    return null;\r\n                }\r\n            });\r\n    }\r\n\r\n    setup(ctx: ITaskContext, gulp: Gulp) {\r\n        ctx.option = this.initOption(ctx);\r\n        return super.setup(ctx, gulp);\r\n    }\r\n\r\n    pipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[] {\r\n        let pipes = super.pipes(ctx, dist, gulp) || [];\r\n        let ps = this.getAssertResetPipe(ctx);\r\n        if (ps && ps.length > 0) {\r\n            pipes = pipes.concat(ps);\r\n        }\r\n        return pipes;\r\n    }\r\n\r\n    protected working(source: ITransform, ctx: ITaskContext, option: IAssertDist, gulp: Gulp, pipes?: Pipe[], output?: OutputPipe[]) {\r\n        let bundle = <IBundleMap>source['bundle'];\r\n        return super.working(source, ctx, option, gulp, pipes, output)\r\n            .then(() => {\r\n                let bundlemap: IBundleMap = {\r\n                    path: bundle.path,\r\n                    modules: bundle.modules\r\n                };\r\n                this.bundleMaps.push(bundlemap);\r\n                if (bundle.sfx) {\r\n                    console.log(`Built sfx package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\r\n                } else {\r\n                    console.log(`Bundled package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\r\n                }\r\n                return;\r\n            });\r\n    }\r\n\r\n\r\n    protected getOption(config: ITaskContext): IAssertDist {\r\n        return config.option;\r\n    }\r\n\r\n    protected loadBuilder(ctx: ITaskContext): Promise<any> {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        let jsbuilder = new Builder(ctx.getRootPath(), <string>option.systemConfig);\r\n\r\n        return Promise.resolve(jsbuilder)\r\n            .then(builder => {\r\n                if (option.systemConfig) {\r\n                    if (_.isArray(option.systemConfig)) {\r\n                        return Promise.all(option.systemConfig.map(cf => builder.loadConfig(cf, undefined, true)))\r\n                            .then(() => {\r\n                                return builder;\r\n                            });\r\n                    } else {\r\n                        return builder.loadConfig(option.systemConfig, undefined, true)\r\n                            .then(() => {\r\n                                return builder;\r\n                            });\r\n                    }\r\n                } else {\r\n                    return builder;\r\n                }\r\n            });\r\n    }\r\n\r\n    private translate(trans: IBundleTransform | IBundleTransform[]): ITransform | ITransform[] {\r\n        if (_.isArray(trans)) {\r\n            return _.map(trans, t => {\r\n                t.stream['bundle'] = t.bundle;\r\n                return t.stream;\r\n            });\r\n        } else {\r\n            trans.stream['bundle'] = trans.bundle;\r\n            return trans.stream;\r\n        }\r\n    }\r\n\r\n    private bundleConfig: IMap<IBundleGroup>;\r\n    protected initBundles(ctx: ITaskContext): Promise<IMap<IBundleGroup>> {\r\n        let opt = <IBundlesConfig>ctx.option;\r\n        let pr = Promise.resolve<IMap<IBundleGroup>>(null)\r\n            .then(() => ctx.to<IMap<IBundleGroup> | Promise<IMap<IBundleGroup>>>(opt.bundles));\r\n\r\n        if (opt.bundleDeps) {\r\n            pr = pr.then(bundles => {\r\n                let pkg = ctx.getPackage(<string>opt.packageFile);\r\n                if (!pkg) {\r\n                    console.log(chalk.red('can not found package.json file.'));\r\n                    process.exit(0);\r\n                }\r\n\r\n                let deps = opt.dependencies ? ctx.to<string[]>(opt.dependencies) : _.keys(pkg.jspm.dependencies);\r\n                if (!deps || deps.length < 0) {\r\n                    console.log(chalk.red('not set bundle dependencies libs, or not setting jspm config.'));\r\n                    process.exit(0);\r\n                }\r\n                if (opt.depsExclude) {\r\n                    let exclude = _.isFunction(opt.depsExclude) ? opt.depsExclude(ctx, deps) : opt.depsExclude;\r\n                    deps = _.filter(deps, d => exclude.indexOf(d) < 0);\r\n                }\r\n\r\n                return Promise.resolve()\r\n                    .then(() => {\r\n                        if (_.isFunction(opt.bundleDeps)) {\r\n                            // opt['_bundleDepsFunc'] = opt.bundleDeps;\r\n                            return opt.bundleDeps(ctx, deps);\r\n                        } else if (_.isBoolean(opt.bundleDeps)) {\r\n                            return {\r\n                                deplibs: {\r\n                                    combine: true,\r\n                                    items: deps\r\n                                }\r\n                            };\r\n                        } else {\r\n                            return opt.bundleDeps;\r\n                        }\r\n                    })\r\n                    .then(bundleDeps => {\r\n\r\n                        let cores = _.keys(bundleDeps);\r\n                        _.each(_.keys(bundles), n => {\r\n                            let b: IBundleGroup = bundles[n];\r\n                            b.exclude = b.exclude || [];\r\n                            b.exclude = cores.concat(b.exclude);\r\n                            bundleDeps[n] = b;\r\n                        });\r\n\r\n                        return bundleDeps;\r\n                    });\r\n            });\r\n        }\r\n\r\n        return pr.then(bundles => {\r\n            this.bundleConfig = bundles;\r\n            console.log('group bundles setting:\\n', bundles, '---------------------------------\\n');\r\n            return bundles;\r\n        });\r\n\r\n    }\r\n\r\n    private getRelativeSrc(ctx: ITaskContext, src: Src, toModule = false): string[] {\r\n        let baseURL = <string>(<IBundlesConfig>ctx.option).bundleBaseDir;\r\n        if (_.isArray(src)) {\r\n            return _.map(src, s => {\r\n                let filename = ctx.toUrl(baseURL, s);\r\n                return toModule ? this.toModulePath(filename) : filename;\r\n            });\r\n        } else {\r\n            let fn = ctx.toUrl(baseURL, src);\r\n            return [(toModule ? this.toModulePath(fn) : fn)];\r\n        }\r\n    }\r\n\r\n    private toModulePath(filename: string): string {\r\n        if (!filename) {\r\n            return '';\r\n        }\r\n        return filename.substring(0, filename.length - path.extname(filename).length);\r\n    }\r\n\r\n    private initOption(ctx: ITaskContext) {\r\n        let option = <IBundlesConfig>_.extend(<IBundlesConfig>{\r\n            baseURL: '',\r\n            bundleBaseDir: '.',\r\n            mainfile: 'bundle.js',\r\n            systemConfig: '',\r\n            packageFile: 'package.json',\r\n            dest: '',\r\n            file: '',\r\n            systemConfigTempl: '',\r\n            relationToRoot: '',\r\n            bust: '',\r\n            bundles: null,\r\n            bundlePaths(ctx) {\r\n                let paths: any = {};\r\n                let bundleDest = ctx.getDist();\r\n                let rootpath = <string>option.bundleBaseDir;\r\n                ctx.getFolders(rootpath, (f, d) => {\r\n                    if (f !== bundleDest) {\r\n                        let p = d + '/*';\r\n                        paths[p] = ctx.toUrl(ctx.env.root, path.join(rootpath, p));\r\n                    }\r\n                    return '';\r\n                });\r\n                // let jpk = <string>option.jspmPackages;\r\n                // let jp = path.basename(jpk) + '/*';\r\n                // paths[jp] = self.toUrl(rootpath, path.join(jpk, jp));\r\n                console.log('paths: ', paths);\r\n                return paths;\r\n            },\r\n            includePackageFiles: [\r\n                'system-polyfills.src.js',\r\n                'system.src.js'\r\n            ],\r\n            jspmMates: {\r\n                '*.css': {\r\n                    loader: 'css'\r\n                },\r\n                '*.json': {\r\n                    loader: 'json'\r\n                },\r\n                '*.jsx': {\r\n                    loader: 'jsx'\r\n                }\r\n            },\r\n            builder: {\r\n                sfx: false,\r\n                minify: false,\r\n                mangle: false,\r\n                sourceMaps: false,\r\n                separateCSS: false,\r\n                lowResSourceMaps: true\r\n            }\r\n        }, <IBundlesConfig>ctx.option);\r\n\r\n        ctx.option = option;\r\n\r\n        option.baseURL = ctx.toRootPath(ctx.toStr(option.baseURL));\r\n        if (!option.bundleBaseDir && ctx.parent) {\r\n            option.bundleBaseDir = ctx.parent.getDist()\r\n        } else if (option.bundleBaseDir) {\r\n            option.bundleBaseDir = ctx.toRootPath(ctx.toStr(option.bundleBaseDir));\r\n        } else {\r\n            console.log(chalk.red('bundleBaseURL config error!'));\r\n            process.exit(0);\r\n        }\r\n\r\n        if (option.systemConfig) {\r\n            option.systemConfig = ctx.toRootSrc(ctx.toSrc(option.systemConfig));\r\n        }\r\n        option.packageFile = ctx.toRootPath(ctx.toStr(option.packageFile));\r\n        option.mainfile = ctx.toStr(option.mainfile);\r\n\r\n        return option;\r\n    }\r\n\r\n    protected getBuildConfig(ctx: ITaskContext) {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        if (!option.builder.config) {\r\n            option.builder.config = _.extend(option.builder.config || {}, {\r\n                paths: ctx.to<IMap<string>>(option.bundlePaths) || {},\r\n                rootURL: <string>option.bundleBaseDir\r\n            });\r\n        }\r\n\r\n        return option.builder;\r\n    }\r\n\r\n    private restps: Pipe[];\r\n    protected getAssertResetPipe(ctx: ITaskContext) {\r\n        if (!this.restps) {\r\n            let option = <IBundlesConfig>ctx.option;\r\n            if (_.isUndefined(option.resetAsserts)) {\r\n                option.resetAsserts = 'assets';\r\n            }\r\n            if (option.resetAsserts) {\r\n                let folders: string[];\r\n                if (_.isString(option.resetAsserts)) {\r\n                    let pth = ctx.toDistPath(option.resetAsserts, this.getInfo());\r\n                    if (existsSync(pth)) {\r\n                        folders = ctx.getFolders(pth);\r\n                        folders.push(pth);\r\n                    } else {\r\n                        console.log(chalk.yellow('rest css asserts folders:', pth, 'not exists.'))\r\n                    }\r\n                } else {\r\n                    folders = <string[]>ctx.toDistSrc(option.resetAsserts, this.getInfo());\r\n                }\r\n\r\n                folders = folders || [];\r\n\r\n                let ps = [];\r\n                let dist = ctx.getDist(this.getInfo());\r\n                let baseURL = <string>option.baseURL; // ctx.toUrl(ctx.getRootPath(), <string>option.baseURL) || '.';\r\n                let root = ctx.getRootPath();\r\n                _.each(folders, f => {\r\n                    let relp = ctx.toUrl(root, path.join(baseURL, ctx.toUrl(dist, f)));\r\n                    let fm = path.basename(f);\r\n                    console.log('reset css url folder name:', chalk.cyan(fm), 'relate url:', chalk.cyan(relp));\r\n                    let reg = new RegExp(`(url\\\\((..\\\\/)+${fm})|(url\\\\(\\\\/${fm})`, 'gi');\r\n                    ps.push(() => replace(reg, `url(${relp}`));\r\n                    let reg2 = new RegExp(`(url\\\\(\\\\'(..\\\\/)+${fm})|(url\\\\(\\\\'\\\\/${fm})`, 'gi');\r\n                    ps.push(() => replace(reg2, `url(\\\\'${relp}`));\r\n                    let reg3 = new RegExp(`(url\\\\((\"..\\\\/)+${fm})|(url\\\\(\"\\\\/${fm})`, 'gi');\r\n                    ps.push(() => replace(reg3, `url(\"${relp}`));\r\n                });\r\n                this.restps = ps;\r\n            } else {\r\n                this.restps = [];\r\n            }\r\n        }\r\n        return this.restps;\r\n    }\r\n\r\n\r\n    protected getBundles(ctx: ITaskContext) {\r\n\r\n        let groups = [];\r\n        if (ctx.env.gb) {\r\n            groups = _.uniq(_.isArray(ctx.env.gb) ? ctx.env.gb : (ctx.env.gb || '').split(','));\r\n        }\r\n\r\n        if (groups.length < 1) {\r\n            groups = _.keys(this.bundleConfig);\r\n        } else {\r\n            groups = _.filter(groups, f => f && this.bundleConfig[f]);\r\n        }\r\n        console.log('cmmand group bundle:', chalk.cyan(<any>groups));\r\n        return groups;\r\n    }\r\n\r\n    protected groupBundle(config: ITaskContext, builder, name: string, bundleGp: IBundleGroup, gulp: Gulp): Promise<IBundleTransform | IBundleTransform[]> {\r\n\r\n        let bundleStr = '';\r\n        let bundleDest = '';\r\n\r\n        let bundleItems: string[] = [];\r\n        let minusStr = this.exclusionString(bundleGp.exclude, this.bundleConfig);\r\n\r\n        if (bundleGp.items) {\r\n            bundleItems = _.isArray(bundleItems) ? <string[]>bundleGp.items : _.keys(bundleGp.items);\r\n        }\r\n\r\n        if (bundleGp.combine) {\r\n            bundleDest = this.getBundleDest(config, name, bundleGp);\r\n            bundleStr = bundleItems.join(' + ') + minusStr;\r\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup source:\\n  ${chalk.cyan(bundleStr)}\\n-------------------------------`);\r\n            return this.createBundler(config, builder, name, bundleStr, bundleDest, bundleGp.builder, bundleGp);\r\n\r\n        } else {\r\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup items:\\n  ${chalk.cyan(<any>bundleItems)}\\n-------------------------------`);\r\n            return Promise.all(bundleItems.map(key => {\r\n                bundleStr = key + minusStr;\r\n                bundleDest = this.getBundleDest(config, key, bundleGp);\r\n                return this.createBundler(config, builder, key, bundleStr, bundleDest, bundleGp.builder, bundleGp);\r\n            }));\r\n        }\r\n    }\r\n\r\n    private exclusionString(exclude, groups): string {\r\n        let str = this.exclusionArray(exclude, groups).join(' - ');\r\n        return (str) ? ' - ' + str : '';\r\n    }\r\n\r\n    private exclusionArray(exclude, groups): string[] {\r\n        let minus: string[] = [];\r\n        exclude = (_.isArray(exclude)) ? exclude : _.keys(exclude);\r\n        _.forEach(exclude, (item: string) => {\r\n            var group = groups[item];\r\n            if (group) {\r\n                // exclude everything from this group\r\n                minus = minus.concat(this.exclusionArray(group.items, groups));\r\n            } else {\r\n                // exclude this item by name\r\n                minus.push(item);\r\n            }\r\n        });\r\n        return minus;\r\n    }\r\n\r\n    private createBundler(config: ITaskContext, builder: any, bundleName: string, bundleStr: string, bundleDest: string, builderCfg: IBuidlerConfig, bundleGp?: IBundleGroup): Promise<IBundleTransform> {\r\n\r\n        let sfx = builderCfg.sfx;\r\n        let bundler = (sfx) ? builder.buildStatic : builder.bundle;\r\n        let shortPath = this.getBundleShortPath(config, bundleName, bundleGp);\r\n        let filename = path.parse(bundleDest).base;\r\n\r\n        return bundler.bind(builder)(bundleStr, bundleDest, builderCfg)\r\n            .then(output => {\r\n                mkdirp.sync(path.dirname(bundleDest));\r\n                var stream: ITransform = source(filename);\r\n                stream.write(output.source);\r\n                process.nextTick(function () {\r\n                    stream.end();\r\n                });\r\n\r\n                console.log('pipe bundling：', chalk.cyan(bundleName));\r\n                return {\r\n                    stream: stream.pipe(vinylBuffer()),\r\n                    bundle: {\r\n                        path: shortPath,\r\n                        sfx: sfx,\r\n                        bundleName: bundleName,\r\n                        filename: filename,\r\n                        bundleDest: bundleDest,\r\n                        modules: output.modules\r\n                    }\r\n                };\r\n            });\r\n\r\n    }\r\n\r\n    private calcChecksums(option: IBundlesConfig, bundles: any[]): Promise<any> {\r\n        let chksums = {};\r\n\r\n        console.log('Calculating checksums...');\r\n\r\n        return Promise.all(_.map(bundles, (bundle: any) => {\r\n            if (!_.isObject(bundle)) {\r\n                return null;\r\n            }\r\n\r\n            return new Promise((resolve, reject) => {\r\n                let filepath = path.join(<string>option.bundleBaseDir || '.', bundle.path);\r\n                let filename = path.parse(bundle.path).base;\r\n                chksum.file(filepath, (err, sum) => {\r\n                    if (err) {\r\n                        console.error(chalk.red(' Checksum Error:'), chalk.red(err));\r\n                    }\r\n                    console.log(filename, chalk.cyan(sum));\r\n                    chksums[bundle.path] = sum;\r\n                    resolve(chksums);\r\n                });\r\n            });\r\n\r\n        })).then(() => {\r\n            return chksums;\r\n        });\r\n    }\r\n\r\n    protected updateBundleManifest(ctx: ITaskContext, bundles: any[], chksums?: any) {\r\n\r\n        chksums = chksums || {};\r\n\r\n        var manifest: any = _.defaults(this.getBundleManifest(ctx), {\r\n            bundles: {},\r\n            chksums: {}\r\n        });\r\n\r\n        // console.log(manifest);\r\n\r\n        _.each(bundles, bundle => {\r\n            if (bundle.path) {\r\n                manifest.bundles[bundle.path] = bundle.modules;\r\n                manifest.chksums[bundle.path] = chksums[bundle.path] || '';\r\n            }\r\n        });\r\n\r\n        return manifest;\r\n\r\n    }\r\n\r\n    private manifestSplit = `/*------bundles infos------*/`;\r\n    private writeBundleManifest(ctx: ITaskContext, manifest, gulp: Gulp): Promise<any> {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        if (!option.mainfile) {\r\n            return Promise.reject('mainfile not configed.');\r\n        }\r\n\r\n\r\n        console.log('Writing manifest...');\r\n\r\n        let baseURL = ctx.toUrl(ctx.getRootPath(), <string>option.baseURL) || '.';\r\n        console.log('system config baseURL: ', chalk.cyan(baseURL));\r\n\r\n        let bust = ctx.toStr(option.bust);\r\n        console.log('system bust: ', chalk.cyan(bust));\r\n\r\n        let output = `\r\nSystem.config({\r\n    baseURL: '${baseURL}',\r\n    defaultJSExtensions: true\r\n});\r\nSystem.bundled = true;\r\nSystem.bust = '${bust}';\r\nif(window != undefined) window.prod = true;\r\n${this.manifestSplit}\r\n`;\r\n        let template = '';\r\n\r\n        if (manifest) {\r\n            // try {\r\n            template = ctx.toStr(option.systemConfigTempl);\r\n\r\n            if (!template) {\r\n                template = (bust) ? `\r\n(function(module) {\r\n    var bust = {};\r\n    var systemLocate = System.locate;\r\n    var systemNormalize = System.normalize;\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var chksums = module.exports.chksums = \\${chksums};\r\n    var bundles = module.exports.bundles = \\${bundles};                    \r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n    System.normalize = function (name, pName, pAddress) {\r\n        return systemNormalize.call(this, name, pName, pAddress).then(function (address) {\r\n            var chksum = chksums[name];\r\n            if (chksums[name]) { bust[address] = chksum; }\r\n            return address;\r\n        });\r\n    };\r\n\r\n    System.locate = function (load) {\r\n        return Promise.resolve(systemLocate.call(this, load)).then(function (address) {\r\n            var chksum = bust[address];\r\n            return (chksum) ? address + '?' + chksum : address;\r\n        });\r\n    };\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n` : `\r\n(function(module) {\r\n    var bundles = module.exports.bundles = \\${bundles};\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n`;\r\n            }\r\n\r\n\r\n            let maps = {\r\n                css: 'github:systemjs/plugin-css@0.1.20.js',\r\n                json: 'github:systemjs/plugin-json@0.1.2.js'\r\n            };\r\n\r\n            _.each(_.keys(manifest.bundles), n => {\r\n                if (/css.min.js$/.test(n)) {\r\n                    maps.css = <string>_.first(manifest.bundles[n]);\r\n                }\r\n                if (/json.min.js$/.test(n)) {\r\n                    maps.css = <string>_.first(manifest.bundles[n]);\r\n                }\r\n            });\r\n\r\n            let jspmMetas = option.jspmMates;\r\n            output += _.template(template)({\r\n                maps: JSON.stringify(maps, null, '    '),\r\n                jspmMeta: JSON.stringify(jspmMetas, null, '    '),\r\n                paths: JSON.stringify(null, null, '    '), // option.builder.config ? option.builder.config.paths :\r\n                chksums: JSON.stringify(manifest.chksums, null, '    '),\r\n                bundles: JSON.stringify(manifest.bundles, null, '    '),\r\n            });\r\n\r\n        }\r\n\r\n\r\n        let includes = option.includes || [];\r\n        return Promise.all(_.map(includes, f => {\r\n            return new Promise<string>((resolve, reject) => {\r\n                readFile(f, 'utf8', (err, data) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                });\r\n            });\r\n        }))\r\n            .then(data => {\r\n                data.push(output);\r\n                let mainfile = ctx.toStr(option.mainfile); // path.relative(this.getBundleManifestPath(ctx), ctx.getDist(this.getInfo()));\r\n                console.log('mainfile:', mainfile);\r\n                mkdirp.sync(path.dirname(mainfile));\r\n                var stream = <NodeJS.ReadWriteStream>source(mainfile);\r\n                stream.write(data.join('\\n'));\r\n                process.nextTick(() => {\r\n                    stream.end();\r\n                });\r\n\r\n                return super.working(stream.pipe(vinylBuffer()), ctx, option, gulp, option.mainfilePipes || [], option.mainfileOutput);\r\n            });\r\n\r\n    }\r\n\r\n    private getBundleManifestPath(ctx: ITaskContext): string {\r\n        return this.getBundleDest(ctx, <string>(<IBundlesConfig>ctx.option).mainfile);\r\n    }\r\n    private getBundleManifest(ctx: ITaskContext): any {\r\n        let data: any = {};\r\n        let mainfile: string = this.getBundleManifestPath(ctx);\r\n        console.log('try to load old bundle in path ', mainfile);\r\n        if (existsSync(mainfile)) {\r\n            try {\r\n                let content = readFileSync(mainfile, 'utf8');\r\n                let idx = content.indexOf(this.manifestSplit);\r\n                idx = idx > 0 ? (idx + this.manifestSplit.length) : 0;\r\n                content = content.substring(idx);\r\n                // console.log(content);\r\n                writeFileSync(mainfile, content);\r\n                data = require(mainfile);\r\n                console.log('has old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\r\n            } catch (e) {\r\n                console.log(chalk.red(e));\r\n            }\r\n        } else {\r\n            console.log('no old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    private getBundleShortPath(ctx: ITaskContext, bundleName: string, bundleGp?: IBundleGroup) {\r\n        var fullPath = bundleGp ? this.getBundleDest(ctx, bundleName, bundleGp)\r\n            : path.join(ctx.getDist(), bundleName);\r\n\r\n        return ctx.toUrl(<string>(<IBundlesConfig>ctx.option).bundleBaseDir, fullPath)\r\n\r\n    }\r\n\r\n    private getBundleDest(ctx: ITaskContext, bundleName: string, bundleGp?: IBundleGroup) {\r\n\r\n        let dest = ctx.getDist();\r\n        if (bundleGp) {\r\n            let min = bundleGp.builder.minify;\r\n            let name = bundleGp.items[bundleName] || bundleName;\r\n            let file = name + ((min) ? '.min.js' : '.js');\r\n\r\n            if (bundleGp.combine) {\r\n                dest = path.join(dest, file);\r\n            } else {\r\n                dest = path.join(dest, bundleName, file);\r\n            }\r\n        } else {\r\n            dest = path.join(dest, bundleName);\r\n        }\r\n\r\n        return dest;\r\n    }\r\n}\r\n"]}