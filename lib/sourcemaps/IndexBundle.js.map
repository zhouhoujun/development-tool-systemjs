{"version":3,"sources":["IndexBundle.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA,qDAA+H;AAE/H,+CAAiD;AAQjD;IAAiC,+BAAQ;IAErC,qBAAY,IAAgB;QAA5B,YACI,kBAAM,IAAI,CAAC,SAEd;QADG,KAAI,CAAC,IAAI,GAAG,WAAW,CAAC;;IAC5B,CAAC;IAED,4BAAM,GAAN,UAAO,GAAiB,EAAE,MAAmB,EAAE,IAAU;QACrD,IAAI,MAAM,GAAmB,GAAG,CAAC,MAAM,CAAC;QACxC,IAAI,GAAQ,CAAC;QACb,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC;QACvB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,GAAG,GAAG,gBAAgB,CAAC;QAC3B,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,2BAAK,GAAL,UAAM,GAAiB,EAAE,IAAiB,EAAE,IAAW;QACnD,IAAI,MAAM,GAAmB,GAAG,CAAC,MAAM,CAAC;QACxC,IAAI,GAAG,GAAG,GAAG,CAAC,UAAU,EAAE,CAAA;QAC1B,IAAI,KAAK,GAAW;YAChB,UAAC,GAAiB,IAAK,OAAA,WAAW,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,CAAA,EAAE,CAAC,EAArJ,CAAqJ;SAC/K,CAAC;QAEF,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACpD,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC5C,CAAC;QAED,MAAM,CAAC,KAAK,CAAC,CAAC,wCAAwC;IAC1D,CAAC;IA9BQ,WAAW;QAJvB,uBAAI,CAAC;YACF,KAAK,EAAE,CAAC;YACR,IAAI,EAAE,4BAAS,CAAC,OAAO,GAAG,4BAAS,CAAC,MAAM;SAC7C,CAAC;;OACW,WAAW,CA+BvB;IAAD,kBAAC;CA/BD,AA+BC,CA/BgC,2BAAQ,GA+BxC;AA/BY,kCAAW","file":"../IndexBundle.js","sourcesContent":["import * as _ from 'lodash';\r\nimport { task, Src, ITaskContext, IAssertDist, Pipe, ITaskInfo, TransformSource, Operation, PipeTask } from 'development-core';\r\nimport { Gulp } from 'gulp';\r\nimport * as htmlreplace from 'gulp-html-replace';\r\nimport { IBundlesConfig } from './config';\r\nimport * as url from 'url';\r\n\r\n@task({\r\n    order: 1,\r\n    oper: Operation.release | Operation.deploy\r\n})\r\nexport class IndexBundle extends PipeTask {\r\n\r\n    constructor(info?: ITaskInfo) {\r\n        super(info);\r\n        this.name = 'mainindex';\r\n    }\r\n\r\n    source(ctx: ITaskContext, option: IAssertDist, gulp: Gulp): TransformSource | Promise<TransformSource> {\r\n        let cfgopt = <IBundlesConfig>ctx.option;\r\n        let src: Src;\r\n        if (cfgopt.index) {\r\n            src = cfgopt.index;\r\n        } else {\r\n            src = 'src/index.html';\r\n        }\r\n        return gulp.src(ctx.toRootSrc(src));\r\n    }\r\n\r\n    pipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[] {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        let pkg = ctx.getPackage()\r\n        let pipes = <Pipe[]>[\r\n            (ctx: ITaskContext) => htmlreplace({ 'js': ctx.toUrl((ctx.toStr(option.baseURL) || './', ctx.toStr(option.mainfile)) + '?bust=' + (ctx.toStr(option.bust) || pkg.version) })\r\n        ];\r\n\r\n        if (option.indexPipes && option.indexPipes.length > 0) {\r\n            pipes = pipes.concat(option.indexPipes);\r\n        }\r\n\r\n        return pipes; // concat(super.pipes(ctx, dist, gulp));\r\n    }\r\n}\r\n"]}