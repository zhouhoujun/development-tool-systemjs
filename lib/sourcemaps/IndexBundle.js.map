{"version":3,"sources":["IndexBundle.ts"],"names":["development_core_1","require","htmlreplace","url","IndexBundle","_super","info","_this","call","this","name","__extends","prototype","source","ctx","option","gulp","src","cfgopt","index","toRootSrc","pipes","dist","pkg","getPackage","js","resolve","toStr","baseURL","mainfile","bust","version","indexPipes","length","concat","PipeTask","__decorate","task","order","oper","Operation","release","deploy","exports"],"mappings":"2sBACAA,mBAAAC,QAAA,oBAEAC,YAAAD,QAAA,qBAEAE,IAAAF,QAAA,OAMaG,YAAW,SAAAC,GAEpB,QAAAD,GAAYE,GAAZ,GAAAC,GACIF,EAAAG,KAAAC,KAAMH,IAAKG,WACXF,GAAKG,KAAO,cAmCpB,MAvCiCC,WAAAP,EAAAC,GAO7BD,EAAAQ,UAAAC,OAAA,SAAOC,EAAmBC,EAAqBC,GAC3C,GACIC,GADAC,EAAyBJ,EAAIC,MAOjC,OAJIE,GADAC,EAAOC,MACDD,EAAOC,MAEP,iBAEHH,EAAKC,IAAIH,EAAIM,UAAUH,KAWlCb,EAAAQ,UAAAS,MAAA,SAAMP,EAAmBQ,EAAmBN,GACxC,GAAID,GAAyBD,EAAIC,OAC7BQ,EAAMT,EAAIU,aACVH,GACA,SAACP,GAAsB,MAAAZ,cAAcuB,GAAMtB,IAAIuB,QAAQZ,EAAIa,MAAMZ,EAAOa,SAAUd,EAAIa,MAAMZ,EAAOc,WAAa,UAAYf,EAAIa,MAAMZ,EAAOe,OAASP,EAAIQ,YAO9J,OAJIhB,GAAOiB,YAAcjB,EAAOiB,WAAWC,OAAS,IAChDZ,EAAQA,EAAMa,OAAOnB,EAAOiB,aAGzBX,GAEfjB,GAvCiCJ,mBAAAmC,SAApB/B,aAAWgC,YAJvBpC,mBAAAqC,MACGC,MAAO,EACPC,KAAMvC,mBAAAwC,UAAUC,QAAUzC,mBAAAwC,UAAUE,mDAE3BtC,aAAAuC,QAAAvC,YAAAA","file":"../IndexBundle.js","sourcesContent":["import * as _ from 'lodash';\r\nimport { task, Src, ITaskContext, IAssertDist, Pipe, ITaskInfo, TransformSource, Operation, PipeTask } from 'development-core';\r\nimport { Gulp } from 'gulp';\r\nimport * as htmlreplace from 'gulp-html-replace';\r\nimport { IBundlesConfig } from './config';\r\nimport * as url from 'url';\r\n\r\n@task({\r\n    order: 1,\r\n    oper: Operation.release | Operation.deploy\r\n})\r\nexport class IndexBundle extends PipeTask {\r\n\r\n    constructor(info?: ITaskInfo) {\r\n        super(info);\r\n        this.name = 'mainindex';\r\n    }\r\n\r\n    source(ctx: ITaskContext, option: IAssertDist, gulp: Gulp): TransformSource | Promise<TransformSource> {\r\n        let cfgopt = <IBundlesConfig>ctx.option;\r\n        let src: Src;\r\n        if (cfgopt.index) {\r\n            src = cfgopt.index;\r\n        } else {\r\n            src = 'src/index.html';\r\n        }\r\n        return gulp.src(ctx.toRootSrc(src));\r\n    }\r\n\r\n    // private packages = {};\r\n    // public getPackage(option: IBundlesConfig): any {\r\n    //     if (!this.packages[<string>option.packageFile]) {\r\n    //         this.packages[<string>option.packageFile] = require(<string>option.packageFile);\r\n    //     }\r\n    //     return this.packages[<string>option.packageFile]\r\n    // }\r\n\r\n    pipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[] {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        let pkg = ctx.getPackage()\r\n        let pipes = <Pipe[]>[\r\n            (ctx: ITaskContext) => htmlreplace({ 'js': url.resolve(ctx.toStr(option.baseURL), ctx.toStr(option.mainfile)) + '?bust=' + (ctx.toStr(option.bust) || pkg.version) })\r\n        ];\r\n\r\n        if (option.indexPipes && option.indexPipes.length > 0) {\r\n            pipes = pipes.concat(option.indexPipes);\r\n        }\r\n\r\n        return pipes; // concat(super.pipes(ctx, dist, gulp));\r\n    }\r\n}\r\n"]}